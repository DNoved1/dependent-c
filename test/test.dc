type Maybe(type T) =
    struct {
        bool valid;
        if valid then T else struct {} value;
    };

T maybe(type T, Maybe(T) maybe, T default) =
    if maybe.valid
        then maybe.value
        else default;

type Array(type T, u64 n) =
    if n == 0
        then struct {}
        else struct { T fst; Array(T, n - 1) snd; };

type lift_bool(bool b) =
    if b
        then struct {}
        else union {};

T get_3_1(type T, Array(T, 3) array) =
    array.snd.fst;

T get(type T, u64 n, u64 i, lift_bool(i < n) proof, Array(T, n) array) =
    if i == 0
        then array.fst
        else get(T, n, i - 1, [struct{}]{}, array.snd);
