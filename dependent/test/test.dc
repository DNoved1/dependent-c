Type <- Maybe(T : Type) =
    {
          valid : Bool
        , value : if valid then T else {}
    };

Bool <- maybe_valid(T : Type, maybe : Maybe(T)) = maybe[0];
if maybe_valid(T, maybe) then T else {}
    <- maybe_value(T : Type, maybe : Maybe(T)) = maybe[1];

T <- maybe(T : Type, maybe : Maybe(T), default : T) =
    if maybe_valid(T, maybe)
        then maybe_value(T, maybe)
        else default;

Type <- Array(T : Type, n : Nat) =
    case n of
        | 0 => {}
        | x + 1 => {T, Array(T, x)};

Type <- lift_bool(b : Bool) =
    if b
        then {}
        else Void;

T <- get_3_1(T : Type, array : Array(T, 3)) =
    array[1][0];

{Nat, Bool} <- add(x : Nat, y : Nat) =
    case x of
        | 0      => <y, false>
        | x_ + 1 => case add(x_, y)[0] of
            | NAT_MAX => <0, true>
            | z_ - 1  => <z_, add(x_, y)[1]>;
